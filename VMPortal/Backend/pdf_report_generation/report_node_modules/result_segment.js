const ResultBar = require("./report_result_bar");
const Utils = require("./report_utils");

class ResultSegment {

   // Parameters.
   #pdf

   // Constants.
   #FONT_SIZE_VALUE = 14;
   #FONT_SIZE_TITLE = this.#FONT_SIZE_VALUE*0.8;
   //#FONT_SIZE_RANGE_TEXT = this.#FONT_SIZE_TITLE*0.9
   #DASH_LENGTH = 0.005; //% of bb.w
   #DASH_LINE_WIDTH = 0.001 // % of bb.h
   #LEFT_SIDE_MARGIN = 0.02 //% of bb.w
   #RESBAR_LENGTH = 0.2 // % of bb.w
   #RESBAR_HEIGHT = 0.4 // % of bb.h
   #RESBAR_X_START = 0.6 //% of bb.w
   #VALUE_LABEL_X_START = 0.9// % of bb.w;

   constructor(pdf){
      this.#pdf = pdf;
   }

   /**
    * 
    * @param {Object} config - Configuration object
    * @param {Object} [config.boundingBox] - The boundign box for the entire result segment expects fields, x, y, w, h
    * @param {number} [config.value] - The value of the variable being represented. As it needs to be displayed.
    * @param {string} [config.color_code] - Where the indicator needs to land in the result bar. Can be "red", "yellow", "green" or "blue";
    * @param {number} [config.ncolors] - Number of colors in the color bar. Can be 2, 3 or 4. 
    * @param {string} [config.title] - The text naming the value.
    * @param {string} [config.range_text] - The text explaining normal values. 
    */

   renderConfiguration(config){

      // Drawing the dahsed line at the bottom. 
      this.#pdf.setDrawColor(Utils.Colors.MAIN_BLUE);
      var dash_length = config.boundingBox.w*this.#DASH_LENGTH;
      this.#pdf.setLineDashPattern([dash_length, dash_length*0.75],0);
      this.#pdf.setLineWidth(config.boundingBox.h*this.#DASH_LINE_WIDTH);
      var y = config.boundingBox.y + config.boundingBox.h;
      this.#pdf.line(config.boundingBox.x,y,config.boundingBox.x + config.boundingBox.w,y,"S");      
      this.#pdf.setLineDashPattern(); // This removes the dash line pattern. 

      var centery = config.boundingBox.y + config.boundingBox.h/2;

      // Drawing the title.            
      var title = config.title.toUpperCase()
      var dim = this.#pdf.getTextDimensions(title);
      this.#pdf.setTextColor(Utils.Colors.RESULT_TEXT_COLOR);
      this.#pdf.setFont("Montserrat","SemiBold");
      this.#pdf.setFontSize(this.#FONT_SIZE_TITLE);
      var x = config.boundingBox.x + config.boundingBox.w*this.#LEFT_SIDE_MARGIN;
      //this.#pdf.text(title,x,centery+dim.h/2,{baseline: "bottom"});

      //this.#pdf.setDrawColor("#ff0000");      
      //this.#pdf.line(config.boundingBox.x,centery,config.boundingBox.x+config.boundingBox.w,centery,"S");
      //this.#pdf.rect(x,centery-dim.h-dim.h/2,dim.w,dim.h,"S");
      this.#pdf.text(title,x,centery-dim.h-dim.h/2,{baseline: "top"});
      
      // Drawing the range text. 
      this.#pdf.setFont("Montserrat","Light");
      dim = this.#pdf.getTextDimensions(config.range_text);
      //this.#pdf.rect(x,centery+dim.h/2,dim.w,dim.h,"S");
      this.#pdf.text(config.range_text,x,centery+dim.h/2,{baseline: "top"});

      // Drawing the value.
      this.#pdf.setFont("Montserrat","SemiBold");
      this.#pdf.setFontSize(this.#FONT_SIZE_VALUE);

      dim = this.#pdf.getTextDimensions(config.value);
      x = config.boundingBox.x + config.boundingBox.w*this.#VALUE_LABEL_X_START
      this.#pdf.text('' + config.value,x,centery-dim.h/2,{baseline: "top"}) // The '' is added to force numbers to string. 

      // Finally we add the Result bar. 
      // Figuring out where the indicator goes
      var resbar = {}
      resbar.indicator = 0;

      var ind_color = config.color_code.toLowerCase();
      if (config.ncolors == 2){
         if (ind_color == "green") resbar.indicator = 0;
         else if (ind_color == "red") resbar.indicator = 1;
      }
      if (config.ncolors == 3){
         if (ind_color == "green") resbar.indicator = 0;
         else if (ind_color == "red") resbar.indicator = 2;
         else if (ind_color == "yellow") resbar.indicator = 1;
      }
      else if (config.ncolors == 4){
         if (ind_color == "green") resbar.indicator = 1;
         else if (ind_color == "red") resbar.indicator = 3;
         else if (ind_color == "yellow") resbar.indicator = 2;
         else if (ind_color == "blue") resbar.indicator = 0;
      }

      resbar.segments = config.ncolors;
      resbar.x = config.boundingBox.x + config.boundingBox.w*this.#RESBAR_X_START
      resbar.y = centery - config.boundingBox.h*this.#RESBAR_HEIGHT/2;
      resbar.w = config.boundingBox.w*this.#RESBAR_LENGTH
      resbar.h = config.boundingBox.h*this.#RESBAR_HEIGHT;
      //buildOptions.dbug = false;

      const resultBar = new ResultBar(this.#pdf,resbar);
      resultBar.render();      



   }


}

module.exports = ResultSegment