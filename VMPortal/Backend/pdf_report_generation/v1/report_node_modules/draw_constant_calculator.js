/**
 * Drawing Constant Calculator. A class in the original application. 
 * Computes a cosntant, from a reference resolution of 1920x1080 to transform resolution indepedant values into the final draw values, given a resolution
 * maintaing aspect ratio and area occupied in the reference resolution. 
 * 
 * The computed values for the references were for a resolution of 1920x1080. However a mistake was made when going from a resolution of 1366x768 to FullHD.
 * In that mistake. Conservation of screen area was not taken into account. As a results computations made in a 1366x768 resolution resulted proportinally larger shapes
 * than those made in 1920x1080 resolution. This didnn't really affect studies, but it does affect the relative positioning of a fixation to the shape on screen.
 * Hence in order to ensure that plots are done correctly a legacy mode is can be used where a secondary scaling is done to the mapped values. 
 * 
 */

class DrawConstantCalculator {

   #map_constant
   #second_rescale;
   #refH;
   #refW;
   #targetW;
   #targetH;

   constructor(targetW, targetH){
      this.#refH = 1080;
      this.#refW = 1920;
      this.#targetH = targetH;
      this.#targetW = targetW;
      this.#map_constant = (1080*targetW)/(1920*targetH);
      this.#map_constant = Math.sqrt(this.#map_constant);      
      this.#second_rescale = false;
   }

   enableSecondRescale(){
      //console.log("Legacy Scaling Enabled")
      this.#second_rescale = true;
   }

   getVerticalRatio(v) {
      let mapped_value = v*this.#map_constant;
      if (!this.#second_rescale) return mapped_value;
      else return mapped_value*this.#refH/this.#targetH;
   }
   
   getHorizontalRatio(v) {
      let mapped_value = v/this.#map_constant;
      if (!this.#second_rescale) return mapped_value;
      else return mapped_value*this.#refW/this.#targetW;
   }   

}

module.exports = DrawConstantCalculator