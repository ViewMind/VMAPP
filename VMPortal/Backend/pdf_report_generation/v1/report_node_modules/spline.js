class Spline {

   #m
   #n
   #z
   #h
   
   /**
    * 
    * @param {number} m - The number of points to add in between each set. 
    */

   constructor(m){
      this.#m = m;
   }

   /**
    * 
    * @param {Array} [dataset] - x ordered array of x,y pairs. Each item is an array of two values. 
    */
   interpolate(dataset){
      
      // Computing the coefficients.
      this.computeCoefficients(dataset);

      // Computing the segments.
      var expandedDataset = [];
      expandedDataset.push(dataset[0]);
      for (var i = 0; i < this.#n; i++){         
         var xi = dataset[i][0]
         var yi = dataset[i][1]
         var xip1 = dataset[i+1][0]
         var yip1 = dataset[i+1][1]
         var segment = this.segementPolinomial(xi,yi,xip1,yip1,i);
         //console.log(segment.length);
         expandedDataset = expandedDataset.concat(segment);
         //console.log(expandedDataset.length);
         expandedDataset.push(dataset[i+1])
      }

      return expandedDataset;

   }

   segementPolinomial(xi,yi,xip1,yip1,i){

      var dx = (xip1 - xi)/this.#m;
      var segment = [];

      var Ai = (this.#z[i+1] - this.#z[i])/(6*this.#h[i]);
      var Bi = this.#z[i]/2;
      var Ci = -this.#z[i+1]*this.#h[i]/6 - this.#h[i]*this.#z[i]/3 + (yip1 - yi)/this.#h[i];

      for (var step = 1; step <= this.#m; step++){
         var x = xi + step*dx;
         var S = yi + (x - xi)*(Ci + (x-xi)*(Bi + (x-xi)*Ai));
         segment.push([x,S]);
      }

      return segment;

   }

   computeCoefficients(dataset){

      var h = [];
      var b = [];
      var n = dataset.length-1;
      for (var i = 0; i < n; i++){
         var h_i = dataset[i+1][0] - dataset[i][0]
         h.push(h_i);
         b.push(6*(dataset[i+1][1] - dataset[i][1])/h_i)         
      }

      var u = [];
      var v = [];
      u.push(0)  // These are dummy values to ensure that the indexes are correct. Acording to the pdf where these calculations are computed. 
      v.push(0)  
      u.push(2*(h[0]+h[1]))
      v.push(b[1] - b[0])

      for (var i = 2; i < n; i++){
         u.push(2*(h[0] + h[i-1]) - h[i-1]*h[i-1]/u[i-1])
         v.push(b[i] - b[i-1] - h[i-1]*v[i-1]/u[i-1])
      }

      // Filling the arrays with zero. 
      var z = [];
      for (var i = 0; i < n+1; i++){
         z.push(0);
      }

      for (var i = n-1; i >= 1; i--){
         z[i] = (v[i] - h[i]*z[i+1])/u[i];
      }

      this.#z = z;
      this.#h = h;
      this.#n = n;

   }

}

module.exports = Spline