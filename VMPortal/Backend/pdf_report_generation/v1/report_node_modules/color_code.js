const Utils = require("./report_utils")

class ColorCode {

   // Parameters
   #pdf
   #color_texts
   #title
   #H
   #W
   #X
   #Y

   // Constants.
   #FONT_SIZE = 9
   #TITLE_RATIO = 0.25 // % of H.
   #CIRCLE_DIAMETER = 0.16 //% of H.
   #TITLE_LEFT_MARGIN = 0.02 //% of W.

   /**
    * Creates and prints a color code explanation cimposed of a solid bar with the title
    * and below circles with text explanations. It will occupy all its bounding box. 
    * @param {jsPDF Instance} pdf 
    * @param {Object} config - The configuration object
    * @param {Object} [config.boundingBox] - The bounding box. Hast to have elements x,y,w,h
    * @param {Object} [config.color_texts] - Each key value pair of the object is of the form: "color": "Multiline text". Lines are split by \n; Color can be red, yellow, green or blue. Default is green. 
    * @param {string} [config.title] - The text in the title bar. Single line. 
    */

   constructor(pdf,config){
      this.#pdf = pdf;
      this.#X = config.boundingBox.x;
      this.#Y = config.boundingBox.y;
      this.#W = config.boundingBox.w;
      this.#H = config.boundingBox.h;
      this.#title = config.title;
      this.#color_texts = config.color_texts;

      this.render();

   }

   render(){

      // Rendering the title bar. 
      this.#pdf.setFont("Montserrat","Regular");
      this.#pdf.setFontSize(this.#FONT_SIZE);

      var x = this.#X;
      var y = this.#Y;
      var w = this.#W;
      var h = this.#H*this.#TITLE_RATIO;
      this.#pdf.setFillColor(Utils.Colors.MAIN_BLUE);
      this.#pdf.rect(x,y,w,h,"F");

      // Now the title.
      var dim = this.#pdf.getTextDimensions(this.#title);
      x = this.#X + this.#W*this.#TITLE_LEFT_MARGIN;
      y = y + h/2 + dim.h/2;
      this.#pdf.setTextColor(Utils.Colors.WHITE);
      this.#pdf.text(this.#title,x,y,{baseline: "bottom"});

      // Computing the vertical alingnment axis for the color code: 
      var centery = this.#Y + h;
      var htocenter = (1-this.#TITLE_RATIO)*this.#H
      centery = centery + htocenter/2;

      // Drawing the actual color code.
      var n = Object.keys(this.#color_texts).length;
      var R = this.#CIRCLE_DIAMETER*this.#H/2;
      var space_between_dot_and_text = R;

      // For Debug. Drawing the center line
      this.#pdf.setDrawColor("#ff0000");
      //this.#pdf.line(this.#X,centery,this.#X+this.#W,centery,"S");

      // First we need como compute the total width of the text.
      // We also prep the text and set the final color
      var totalWidth = 0;
      var color_object = [];
      for (var c in this.#color_texts){
         var text = this.#color_texts[c];
         var ccode = c.toLowerCase();
         var color = Utils.Colors.CODE_GREEN;
         if (ccode == "red"){
            color = Utils.Colors.CODE_RED;
         }
         else if (ccode == "blue"){
            color = Utils.Colors.CODE_BLUE
         }
         else if (ccode == "yellow"){
            color = Utils.Colors.CODE_YELLOW;
         }
         text = text.split("\n");
         var dim = this.#pdf.getTextDimensions(text)
         color_object.push({"color": color, 
                            "text": text, 
                            "dim": dim})
         totalWidth = totalWidth + dim.w;
      }

      //console.log(this.#W,totalWidth)
      //console.log(R,n)

      // And the total width to be used is:
      totalWidth = totalWidth // The width of the text
      + n*space_between_dot_and_text // The space between the dot and the text.
      + n*2*R // The diameter of the each dot.

      // The remainign space is spaced out evenly. 
      var space_between_codes = (this.#W - totalWidth)/(n-1);
      //console.log(space_between_codes);

      this.#pdf.setTextColor(Utils.Colors.MAIN_BLUE);
      x = this.#X
      for (var c = 0; c < color_object.length; c++){

         var text = color_object[c].text
         var dim = color_object[c].dim;

         this.#pdf.setFillColor(color_object[c].color);         

         // Adding the circle.
         //console.log(x+R,y,R)
         this.#pdf.circle(x+R,centery,R,"F");

         // Adding the multiline text
         x = x+2*R+space_between_dot_and_text
         //this.#pdf.rect(x,centery-dim.h/2,dim.w,dim.h,"S");
         this.#pdf.text(text,x,centery - dim.h/2,{baseline: "top"})
         //this.#pdf.text(text,x,centery - dim.h/2,{baseline: "top"})
         x = x + dim.w + space_between_codes;

      }



   }

   
}

module.exports = ColorCode