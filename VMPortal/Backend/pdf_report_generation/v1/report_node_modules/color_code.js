const Utils = require("./report_utils")

class ColorCode {

   // Parameters
   #pdf
   #color_texts
   #title
   #H
   #W
   #X
   #Y

   // Constants.
   #FONT_SIZE = 9
   #TITLE_RATIO = 0.25 // % of H.
   #CIRCLE_DIAMETER = 0.16 //% of H.
   #TITLE_LEFT_MARGIN = 0.02 //% of W.

   /**
    * Creates and prints a color code explanation composed of a white rectangle with the title and the color code below. 
    * and below circles with text explanations. It will occupy all its bounding box. 
    * @param {jsPDF Instance} pdf 
    * @param {Object} config - The configuration object
    * @param {Object} [config.boundingBox] - The bounding box. Hast to have elements x,y,w,h
    * @param {Object} [config.color_texts] - Each key value pair of the object is of the form: "color": "Multiline text". Lines are split by \n; Color can be red, yellow, green or blue. Default is green. 
    * @param {string} [config.title] - The text in the title bar. Single line. 
    */

   constructor(pdf,config){
      this.#pdf = pdf;
      this.#X = config.boundingBox.x;
      this.#Y = config.boundingBox.y;
      this.#W = config.boundingBox.w;
      this.#H = config.boundingBox.h;
      this.#title = config.title;
      this.#color_texts = config.color_texts;

      this.render();

   }

   render(){

      let leftMargin = Utils.DimensionMapper.dw(20)
      let D = Utils.DimensionMapper.dh(6);
      let R = D/2
      let leftMargin2ndColumn = Utils.DimensionMapper.dw(263)
      let airBetweenDotAndText = Utils.DimensionMapper.dw(5)
      let x = 0
      let y = 0;


      // We need to draw the white rectangle background.
      this.#pdf.setFillColor(Utils.Colors.WHITE);
      let rc = Utils.DimensionMapper.dh(5)
      this.#pdf.roundedRect(this.#X,this.#Y,this.#W,this.#H,rc,rc,'F');

      // Rendering the title text. 
      this.#pdf.setFont(Utils.FontNames.NAME, Utils.FontNames.MEDIUM)
      this.#pdf.setTextColor(Utils.Colors.TEXT_BLACK);
      this.#pdf.setFontSize(Utils.FontSizes.NORMAL);

      y = this.#Y + Utils.DimensionMapper.dh(15)
      x = this.#X + leftMargin;
      this.#pdf.text(this.#title,x,y,{baseline: "top"});

      // Redering each of the colored bullets. We start with the first line. 
      this.#pdf.setFont(Utils.FontNames.NAME, Utils.FontNames.NORMAL)
      this.#pdf.setTextColor(Utils.Colors.TEXT_GRAY);
      this.#pdf.setFontSize(Utils.FontSizes.SMALL);
      y = this.#Y + Utils.DimensionMapper.dh(38)

      let color_list = {};

      let xleft = this.#X +leftMargin
      let xright = this.#X +leftMargin2ndColumn
      let ytop  = this.#Y + Utils.DimensionMapper.dh(38)
      let ybottom = this.#Y + Utils.DimensionMapper.dh(59)

      color_list["red"] = {x: xleft, y: ytop, color: Utils.Colors.CODE_RED}
      color_list["yellow"] = {x: xleft, y: ybottom, color: Utils.Colors.CODE_YELLOW}
      color_list["green"] = {x: xright, y: ytop, color: Utils.Colors.CODE_GREEN}
      color_list["blue"] = {x: xright, y: ybottom, color: Utils.Colors.CODE_BLUE}

      for (var c in this.#color_texts){
         let specs = color_list[c];
         let text = this.#color_texts[c];
         let x = specs.x
         let y = specs.y
         this.#pdf.setFillColor(specs.color);
         this.#pdf.roundedRect(x,y,D,D,R,R,'F');
         text = text.replace('\n',' ') // Removing the double line. 
         x = x + 2*R + airBetweenDotAndText;
         this.#pdf.text(text,x,y,{baseline: "top"})   
      }

      // // The Red Dot. 
      // this.#pdf.setFillColor(Utils.Colors.CODE_RED);
      // x = this.#X +leftMargin
      // this.#pdf.roundedRect(x,y,D,D,R,R,'F');
      // let text = this.#color_texts["red"];
      // text = text.replace('\n',' ') // Removing the double line. 
      // x = this.#X +leftMargin + 2*R + airBetweenDotAndText;
      // this.#pdf.text(text,x,y,{baseline: "top"})

      // // The Green Dot. 
      // this.#pdf.setFillColor(Utils.Colors.CODE_GREEN);
      // x = this.#X + leftMargin2ndColumn
      // this.#pdf.roundedRect(x,y,D,D,R,R,'F');
      // text = this.#color_texts["green"];
      // text = text.replace('\n',' ') // Removing the double line. 
      // x = x + 2*R + airBetweenDotAndText;
      // this.#pdf.text(text,x,y,{baseline: "top"})

      // // Colored Bullets 2nd Line
      // y = this.#Y + Utils.DimensionMapper.dh(59)

      // // The Yellow Dot. 
      // this.#pdf.setFillColor(Utils.Colors.CODE_YELLOW);
      // x = this.#X + leftMargin
      // this.#pdf.roundedRect(x,y,D,D,R,R,'F');
      // text = this.#color_texts["green"];
      // text = text.replace('\n',' ') // Removing the double line. 
      // x = x + 2*R + airBetweenDotAndText;
      // this.#pdf.text(text,x,y,{baseline: "top"}) 
      
      // if ("blue" in this.#color_texts){
      //    this.#pdf.setFillColor(Utils.Colors.CODE_BLUE);
      //    x = this.#X + leftMargin2ndColumn
      //    this.#pdf.roundedRect(x,y,D,D,R,R,'F');
      //    text = this.#color_texts["blue"];
      //    text = text.replace('\n',' ') // Removing the double line. 
      //    x = x + 2*R + airBetweenDotAndText;
      //    this.#pdf.text(text,x,y,{baseline: "top"})   
      // }


      // // Rendering the title bar. 
      // this.#pdf.setFont("Montserrat","Regular");
      // this.#pdf.setFontSize(this.#FONT_SIZE);

      // var x = this.#X;
      // var y = this.#Y;
      // var w = this.#W;
      // var h = this.#H*this.#TITLE_RATIO;
      // this.#pdf.setFillColor(Utils.Colors.MAIN_BLUE);
      // this.#pdf.rect(x,y,w,h,"F");

      // // Now the title.
      // var dim = this.#pdf.getTextDimensions(this.#title);
      // x = this.#X + this.#W*this.#TITLE_LEFT_MARGIN;
      // y = y + h/2 + dim.h/2;
      // this.#pdf.setTextColor(Utils.Colors.WHITE);
      // this.#pdf.text(this.#title,x,y,{baseline: "bottom"});

      // // Computing the vertical alingnment axis for the color code: 
      // var centery = this.#Y + h;
      // var htocenter = (1-this.#TITLE_RATIO)*this.#H
      // centery = centery + htocenter/2;

      // // Drawing the actual color code.
      // var n = Object.keys(this.#color_texts).length;
      // var R = this.#CIRCLE_DIAMETER*this.#H/2;
      // var space_between_dot_and_text = R;

      // // For Debug. Drawing the center line
      // this.#pdf.setDrawColor("#ff0000");
      // //this.#pdf.line(this.#X,centery,this.#X+this.#W,centery,"S");

      // // First we need como compute the total width of the text.
      // // We also prep the text and set the final color
      // var totalWidth = 0;
      // var color_object = [];
      // for (var c in this.#color_texts){
      //    var text = this.#color_texts[c];
      //    var ccode = c.toLowerCase();
      //    var color = Utils.Colors.CODE_GREEN;
      //    if (ccode == "red"){
      //       color = Utils.Colors.CODE_RED;
      //    }
      //    else if (ccode == "blue"){
      //       color = Utils.Colors.CODE_BLUE
      //    }
      //    else if (ccode == "yellow"){
      //       color = Utils.Colors.CODE_YELLOW;
      //    }
      //    text = text.split("\n");
      //    var dim = this.#pdf.getTextDimensions(text)
      //    color_object.push({"color": color, 
      //                       "text": text, 
      //                       "dim": dim})
      //    totalWidth = totalWidth + dim.w;
      // }

      // //console.log(this.#W,totalWidth)
      // //console.log(R,n)

      // // And the total width to be used is:
      // totalWidth = totalWidth // The width of the text
      // + n*space_between_dot_and_text // The space between the dot and the text.
      // + n*2*R // The diameter of the each dot.

      // // The remainign space is spaced out evenly. 
      // var space_between_codes = (this.#W - totalWidth)/(n-1);
      // //console.log(space_between_codes);

      // this.#pdf.setTextColor(Utils.Colors.MAIN_BLUE);
      // x = this.#X
      // for (var c = 0; c < color_object.length; c++){

      //    var text = color_object[c].text
      //    var dim = color_object[c].dim;

      //    this.#pdf.setFillColor(color_object[c].color);         

      //    // Adding the circle.
      //    //console.log(x+R,y,R)
      //    this.#pdf.circle(x+R,centery,R,"F");

      //    // Adding the multiline text
      //    x = x+2*R+space_between_dot_and_text
      //    //this.#pdf.rect(x,centery-dim.h/2,dim.w,dim.h,"S");
      //    this.#pdf.text(text,x,centery - dim.h/2,{baseline: "top"})
      //    //this.#pdf.text(text,x,centery - dim.h/2,{baseline: "top"})
      //    x = x + dim.w + space_between_codes;

      // }



   }

   
}

module.exports = ColorCode