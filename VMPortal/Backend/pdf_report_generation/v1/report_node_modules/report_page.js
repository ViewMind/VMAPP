const Utils = require('./report_utils');
const sizeOf = require('image-size')



class ReportPage {

   // Requried configuration.
   #pdf
   #W
   #H
   #pageCounter;
   #current_directory

   // Required Texts for the very first page.
   #lang_date 
   #lang_evaluator
   #lang_doctor
   #patient_name
   #patient_age
   #evaluator_name
   #doctor_name
   #date_text

   // Internal communication
   #effectiveArea

   /**
    * Setups up the images and text that go into every page of the report. This is the same for all report types. 
    * @param {Pointer to jsPDF} [pdf]
    * @param {Object} [textData] - Contains the text information that will be printed on the first.
    * @param {Object} [textData.leftBoxData]  - Left box data is the evaluator, doctor and ISO date. 
    * @param {Object} [textData.rightBoxData] - Right box data is the patient and its age. 
    * @param {Object} [textData.langKey] - This is an array of key value pairs. The key are standarized keys for patient, doctor, age, evaluator and date. While the values are the language depedant strings that also serve as strings for the left and right Box Data. This was implemented in this way to disrupt the interface of the constructor as little as possible from version 1 of the report. 
    * @param {Object} [textData.langMonthList] - A language dependant list of abbreviations of the months. 
    * @param {string} [textData.path] - The current working directory. 
    */


   constructor(pdf, textData){
      
      this.#pdf = pdf;
      this.#W = pdf.internal.pageSize.getWidth();
      this.#H = pdf.internal.pageSize.getHeight();
      this.#pageCounter = 0;

      this.#current_directory = textData.path;
      this.#lang_date = textData.langKey["date"];
      this.#lang_evaluator = textData.langKey["evaluator"];
      this.#lang_doctor = textData.langKey["doctor"];

      let pat_key = textData.langKey["patient"];
      let age_key = textData.langKey["age"];

      this.#patient_name = textData.rightBoxData[pat_key]
      this.#patient_age  = textData.rightBoxData[age_key]
      this.#evaluator_name = textData.leftBoxData[this.#lang_evaluator]
      this.#doctor_name = textData.leftBoxData[this.#lang_doctor]

      let isodate = textData.leftBoxData[this.#lang_date];

      // console.log(JSON.stringify(textData.rightBoxData))
      // console.log(JSON.stringify(textData.leftBoxData))
      // console.log(this.#lang_date);

      this.#date_text = this.isoDateToDisplayDate(isodate,textData.langMonthList)
      
   }

   isoDateToDisplayDate(date,lang_month_list){

      // First we split the date and the time.
      let iso_date_parts = date.split(" ");
      let actual_date = iso_date_parts[0];
      let time        = iso_date_parts[1];

      // Splitting the date in day, month and year.
      let dmy = actual_date.split("-");
      let day = dmy[2]
      let month = dmy[1]
      let year = dmy[0]

      // Transforming the month to text by index in list
      let index_month = parseInt(month);
      index_month--; // January is 0, February is 1 and so on 
      month = lang_month_list[index_month]

      return day + " " + month + " " + year + " " + time;

   }

   /**
    * Setups up and brigns the focus to a new page.
    * The first page will include the background eye logo, while all successive pages won't.
    * @param {Array} titles - Each element in the array has two fields: py and text. The text will always be transformed to upper case. py is the percent of the effective page height at witch the base line of each subtitle after the first is put. The first is ignored.  
    * @returns The effective box which can be used to actually put content in the page. 
    */
   createNewReportPage(titles) {

      if (this.#pageCounter > 0){
         // Any other page other than the first needs to be added. 
         this.#pdf.addPage("a4","p");         
      }

      let W  = this.#pdf.internal.pageSize.getWidth();
      let H = this.#pdf.internal.pageSize.getHeight();

      // Adding a background color. 
      this.#pdf.setFillColor(Utils.Colors.BACKGROUND_COLOR);
      this.#pdf.rect(0,0,W,H,'F');

      // Drawing the top of the page design. 
      let h = Utils.DimensionMapper.dh(51)
      let topy_page = h // Save it for when we compute the effective area to return. 
      
      let long_w_1 = Utils.DimensionMapper.dw(261)
      let short_w_1 = Utils.DimensionMapper.dw(261-26)
      
      let long_w_2 = Utils.DimensionMapper.dw(261+26)
      let short_w_2 = Utils.DimensionMapper.dw(261)      
      
      let long_w_3 = Utils.DimensionMapper.dw(261+52)
      let short_w_3 = Utils.DimensionMapper.dw(261+26)

      // Since we need to repeat the same thing 3 times but with different colors and dimensions, we do a cicle
      let colors = [ Utils.Colors.LIGHT_BLUE, Utils.Colors.MEDIUM_BLUE, Utils.Colors.DARK_BLUE ]
      let long_edge = [long_w_3, long_w_2, long_w_1]
      let short_edge = [short_w_3, short_w_2, short_w_1]

      // This will draw the 3 trapezoids at the top.
      for (var i = 0; i < 3; i++){

         let c = colors[i]
         let sw = short_edge[i]
         let lw = long_edge[i]

         this.#pdf.setDrawColor(c);
         this.#pdf.setFillColor(c)

         //console.log("lw " + lw + " and sw " + sw)

         var path = [];
         path.push({op : "m", c: [0,0]})
         path.push({op : "l", c: [lw,0]})
         path.push({op : "l", c: [sw,h]})
         path.push({op : "l", c: [0,h]})
         path.push({op : "h", c: []})

         this.#pdf.path(path);
         this.#pdf.fillStroke();
   
      }


      // Next we need to add the eye image.
      const eyeLogo = this.#current_directory + '/resources/viewmind_logo_white_tight.png'
      const image_dim = sizeOf(eyeLogo);
      //console.log(image_dim);
      var imgW = Utils.DimensionMapper.dw(92);
      var imgH = imgW*image_dim.height/image_dim.width;
      var x = Utils.DimensionMapper.dw(45);
      var y = Utils.DimensionMapper.dh(15);
      var imgData = Utils.Utils.bas64EncodeFile(eyeLogo);
      imgData = 'data:image/png;base64,' + imgData;   
      this.#pdf.addImage(imgData,'PNG',x,y,imgW,imgH,"",'FAST',0);   


      // Foooter design
      this.#pdf.setDrawColor(Utils.Colors.DARK_BLUE);
      this.#pdf.setFillColor(Utils.Colors.DARK_BLUE);

      var path = [];
      path.push({op : "m", c: [0,H]})
      path.push({op : "l", c: [W,H]})
      path.push({op : "l", c: [W,H - Utils.DimensionMapper.dh(12)]})
      path.push({op : "l", c: [W - Utils.DimensionMapper.dw(244),H - Utils.DimensionMapper.dh(12)]})
      path.push({op : "l", c: [W - Utils.DimensionMapper.dw(254),H - Utils.DimensionMapper.dh(4)]})
      path.push({op : "l", c: [0,H - Utils.DimensionMapper.dh(4)]})
      path.push({op : "h", c: []})
      this.#pdf.path(path);
      this.#pdf.fillStroke();

      var effectiveArea;

      let margin = Utils.DimensionMapper.dw(45)

      if (this.#pageCounter === 0){
         // If this is the first page we need to add the extra information: The date, the Evaluator, the Doctor the Patient and the Age. 

         // Adding the date
         this.#pdf.setFont(Utils.FontNames.NAME, Utils.FontNames.NORMAL)
         this.#pdf.setTextColor(Utils.Colors.TEXT_BLACK);
         this.#pdf.setFontSize(Utils.FontSizes.LARGE);
   
         let bb = this.#pdf.getTextDimensions(this.#lang_date + ":");
         let x = Utils.DimensionMapper.dw(370);
         let y = Utils.DimensionMapper.dh(19)
         this.#pdf.text(this.#lang_date + ":",x,y,{baseline: "top"})
         x = x + bb.w + Utils.DimensionMapper.dw(10);
         this.#pdf.setFont(Utils.FontNames.NAME, Utils.FontNames.MEDIUM)
         this.#pdf.text(this.#date_text,x,y,{baseline: "top"})

         // Adding the Patient Name and the Age.
         this.#pdf.setFont(Utils.FontNames.NAME, Utils.FontNames.MEDIUM)
         this.#pdf.setTextColor(Utils.Colors.TEXT_BLACK);
         this.#pdf.setFontSize(Utils.FontSizes.VERY_LARGE);
         bb = this.#pdf.getTextDimensions(this.#patient_name);
         x = Utils.DimensionMapper.dw(45)
         y = Utils.DimensionMapper.dh(81)
         this.#pdf.text(this.#patient_name,x,y,{baseline: "top"})

         this.#pdf.setFont(Utils.FontNames.NAME, Utils.FontNames.NORMAL)
         this.#pdf.setTextColor(Utils.Colors.TEXT_GRAY);
         x = x + bb.w + Utils.DimensionMapper.dw(10);
         this.#pdf.text("(" + this.#patient_age + ")",x,y,{baseline: "top"})

         // Adding the Evaluator         
         this.#pdf.setFont(Utils.FontNames.NAME, Utils.FontNames.NORMAL)
         this.#pdf.setTextColor(Utils.Colors.TEXT_BLACK);
         this.#pdf.setFontSize(Utils.FontSizes.LARGE);
   
         bb = this.#pdf.getTextDimensions(this.#lang_evaluator + ":");
         x = Utils.DimensionMapper.dw(370);
         this.#pdf.text(this.#lang_evaluator + ":",x,y,{baseline: "top"})
         x = x + bb.w + Utils.DimensionMapper.dw(10);
         this.#pdf.setFont(Utils.FontNames.NAME, Utils.FontNames.MEDIUM)
         this.#pdf.text(this.#evaluator_name,x,y,{baseline: "top"})

         let xvalue = x // We need to save this x value to ensure that the doctor name and evaluator name start at the same x value. 
         y = y + bb.h + Utils.DimensionMapper.dh(5)
         
         // Adding the Doctor. 
         this.#pdf.setFont(Utils.FontNames.NAME, Utils.FontNames.NORMAL)
         bb = this.#pdf.getTextDimensions(this.#lang_doctor + ":");
         x = Utils.DimensionMapper.dw(370);
         this.#pdf.text(this.#lang_doctor + ":",x,y,{baseline: "top"})
         x = x + bb.w + Utils.DimensionMapper.dw(10);
         this.#pdf.setFont(Utils.FontNames.NAME, Utils.FontNames.MEDIUM)
         this.#pdf.text(this.#doctor_name,xvalue,y,{baseline: "top"})

         // Computing the effective area. 
         
         effectiveArea = {
            x: margin,
            y: y + bb.h,
            w: W - 2*margin,
            h: H - y - bb.h - Utils.DimensionMapper.dh(12) // The 12 comes from the height of the footer design. 
         }      

      }
      else {
         
         // This is not the first page, so all we need to do is compute the effective area. 
         effectiveArea = {
            x: margin,
            y: topy_page,
            w: W - 2*margin,
            h: H - topy_page - Utils.DimensionMapper.dh(12) // The 12 comes from the height of the footer design. 
         }      

      }

      this.#pageCounter++;
      this.#effectiveArea = effectiveArea;

      return this.addTitlesAndSubTitles(titles)

   } 

   addTitlesAndSubTitles(titles){

      if (titles === undefined) return this.#effectiveArea;

      this.#pdf.setFont(Utils.FontNames.NAME, Utils.FontNames.HEAVY)
      this.#pdf.setTextColor(Utils.Colors.DARK_BLUE);
      this.#pdf.setFontSize(Utils.FontSizes.NORMAL);
      let lineWidth = Utils.DimensionMapper.dh(2)
      this.#pdf.setLineWidth(lineWidth);

      var newy = 0;
      var barx_start = this.#effectiveArea.x;
      var barx_end   = this.#effectiveArea.x + this.#effectiveArea.w;

      // The x value for all titles are the same.
      var x = this.#effectiveArea.x;

      for (var i = 0; i < titles.length; i++){

         var title = titles[i].text.toUpperCase();
         var yratio = titles[i].py;
         var bb = this.#pdf.getTextDimensions(title);
         var y;
         if (i === 0) {
            // The first title requires the margin to be left. 
            y = this.#effectiveArea.y + Utils.DimensionMapper.dh(40);
         }
         else{
            y = this.#effectiveArea.y + this.#effectiveArea.h*yratio;
         }
         this.#pdf.text(title,x,y,{baseline: "top"})
         y = y + bb.h + Utils.DimensionMapper.dh(10)
         this.#pdf.line(barx_start,y,barx_end,y,"S")

         if (i === 0){
            // Computing the new y value for the effective area
            newy = y + lineWidth
         }

      }

      this.#effectiveArea.h = this.#effectiveArea.h - (newy - this.#effectiveArea.y);
      this.#effectiveArea.y = newy;
      return this.#effectiveArea;

   }

}; 


module.exports = ReportPage
