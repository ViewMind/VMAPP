const Utils = require('./report_utils');
const sizeOf = require('image-size')


class ReportPage {

   // Requried configuration.
   #pdf
   #W
   #H
   #pageCounter;
   #motto;
   #leftBoxText;
   #rightBoxText;
   #current_directory

   // Computed values.
   #effective_area;

   // Constant values. 
   #BACKGROUND_EYE_WIDTH
   #VM_LOGO_WIDTH       
   #HEADER_IMAGE_HEIGHT 
   #MOTTO_FONT_SIZE     
   #X_MOTTO_RIGHT_MARGIN             
   #Y_MOTTO             
   #X_VMLOGO            
   #DATA_BOX_WIDTH      
   #DATA_BOX_HEIGHT     
   #DATA_FONT_SIZE      
   #DATA_BOX_VSPACE     
   #DATA_BOX_LINE_WIDTH 
   #VERTICAL_SPACE_MULT 
   #HMARGIN_ON_BOX_TEXT
   #FOOTER_HEIGHT
   #TITLE_FONT_SIZE
   #TITLE_TOP_MARGIN

   /**
    * Setups up the images and text that go into every page of the report. This is the same for all report types. 
    * @param {Pointer to jsPDF} [pdf]
    * @param {Object} [textData] - Contains the text information that will be printed in every page.
    * @param {string|Array} [textData.motto]  - String or array of string repressting the motto to print at the header. 
    * @param {Object} [textData.leftBoxData]  - Object that contains the data to be printed in the the left box of the header. The data should be in a key value pair so as print bold(key: ) value on each line. 
    * @param {Object} [textData.rightBoxData] - Idem for leftBoxData, but used to print in the rightBox of th header. 
    * @param {string} [textData.path] - The current working directory. 
    */


   constructor(pdf, textData){
      
      this.#pdf = pdf;
      this.#W = pdf.internal.pageSize.getWidth();
      this.#H = pdf.internal.pageSize.getHeight();
      this.#pageCounter = 0;

      this.#motto = textData.motto;
      this.#leftBoxText = textData.leftBoxData;
      this.#rightBoxText = textData.rightBoxData;
      this.#current_directory = textData.path;
      
      this.#BACKGROUND_EYE_WIDTH = 0.5*this.#W;
      this.#VM_LOGO_WIDTH        = 0.19*this.#W;
      this.#HEADER_IMAGE_HEIGHT  = 0.107*this.#H; 
      this.#MOTTO_FONT_SIZE      = 10;    // pts
      this.#Y_MOTTO              = 0.06*this.#H
      this.#X_VMLOGO             = 0.05*this.#W
      this.#DATA_BOX_WIDTH       = 0.44*this.#W
      this.#DATA_BOX_HEIGHT      = 0.073*this.#H
      this.#DATA_FONT_SIZE       = 10
      this.#DATA_BOX_VSPACE      = 0.01*this.#H
      this.#DATA_BOX_LINE_WIDTH  = 0.6; // in mm.
      this.#VERTICAL_SPACE_MULT  = 1.5;  
      this.#HMARGIN_ON_BOX_TEXT  = 0.05*this.#DATA_BOX_WIDTH   
      this.#FOOTER_HEIGHT        = 0.025*this.#H; 
      this.#TITLE_FONT_SIZE      = 12;
      this.#TITLE_TOP_MARGIN     = 0.02*this.#H
      this.#X_MOTTO_RIGHT_MARGIN = 0.03*this.#W 
   }

   /**
    * Setups up and brigns the focus to a new page.
    * The first page will include the background eye logo, while all successive pages won't.
    * @param {Array} titles - Each element in the array has two fields: py and text. The text will always be transformed to upper case. py is the percent of the effective page height at witch the base line of each subtitle after the first is put. The first is ignored.  
    * @returns The effective box which can be used to actually put content in the page. 
    */
   createNewReportPage(titles) {

      if (this.#pageCounter > 0){
         // This means that we need to call add page first.
         this.#pdf.addPage("a4","p");
         //this.#pdf.setFillColor("#aaaaaa");
         //this.#pdf.rect(0,0,this.#W,this.#H,'F');
      }
      else{
         //this.#pdf.setFillColor("#aaaaaa");
         //this.#pdf.rect(0,0,this.#W,this.#H,'F');   
         // The first page requires the background eye image. 
         const eyeLogo = this.#current_directory + '/resources/background_vm_eye_logo.png'
         const image_dim = sizeOf(eyeLogo);
         //console.log(image_dim);
         var imgW = this.#BACKGROUND_EYE_WIDTH;
         var imgH = imgW*image_dim.height/image_dim.width;
         var x = (this.#W - imgW)/2;
         var y = (this.#H - imgH)/2;
         var imgData = Utils.Utils.bas64EncodeFile(eyeLogo);
         imgData = 'data:image/png;base64,' + imgData;   
         this.#pdf.addImage(imgData,'PNG',x,y,imgW,imgH,"",'FAST',0);   
      }

      // Adding the header image. 
      const headBkg = this.#current_directory + '/resources/header_background.png'
      var imgData = Utils.Utils.bas64EncodeFile(headBkg);
      const headerDim = sizeOf(headBkg);
      var headerHeight = this.#W*headerDim.height/headerDim.width;
      imgData = 'data:image/png;base64,' + imgData;
      this.#pdf.addImage(imgData,'PNG',0,0,this.#W,this.#HEADER_IMAGE_HEIGHT,"",'FAST',0);   

      // Adding the viewmind logo. 
      const vmLogo = this.#current_directory + '/resources/viewmind_logo_white_tight.png'
      const image_dim = sizeOf(vmLogo);
      //console.log(image_dim);
      var imgW = this.#VM_LOGO_WIDTH;
      var imgH = imgW*image_dim.height/image_dim.width;
      var imgData = Utils.Utils.bas64EncodeFile(vmLogo);
      imgData = 'data:image/png;base64,' + imgData;
      //console.log(imgData)   
      this.#pdf.addImage(imgData,'PNG',this.#X_VMLOGO,this.#Y_MOTTO,imgW,imgH,"",'FAST',0);   

      // Motto.      
      this.#pdf.setFont("Montserrat","SemiBoldItalic")
      this.#pdf.setFontSize(this.#MOTTO_FONT_SIZE);
      this.#pdf.setTextColor("#ffffff");

      var bb = this.#pdf.getTextDimensions(this.#motto);
      //console.log(this.#motto);
      this.#pdf.text(this.#motto,this.#W - this.#X_MOTTO_RIGHT_MARGIN - bb.w,this.#Y_MOTTO,{"baseline" : "hanging"})

      // Patient/Study data Information box. 
      this.#pdf.setLineWidth(this.#DATA_BOX_LINE_WIDTH)
      this.#pdf.setDrawColor(Utils.Colors.MAIN_BLUE);
      x = (this.#W - this.#DATA_BOX_WIDTH*2)/2;
      this.#pdf.rect(x,headerHeight + this.#DATA_BOX_VSPACE,this.#DATA_BOX_WIDTH,this.#DATA_BOX_HEIGHT);
      this.#pdf.rect(x+this.#DATA_BOX_WIDTH,headerHeight + this.#DATA_BOX_VSPACE,this.#DATA_BOX_WIDTH,this.#DATA_BOX_HEIGHT);

      // Adding the text to each box. 
      var startx = x; // Saving the value for the divisor. 
      x = x + this.#HMARGIN_ON_BOX_TEXT;
      y = headerHeight + this.#DATA_BOX_VSPACE + this.#DATA_BOX_LINE_WIDTH;

      this.textOfKeyValueArrayInBox(this.#leftBoxText,x,y);

      x = x + this.#DATA_BOX_WIDTH;
      this.textOfKeyValueArrayInBox(this.#rightBoxText,x,y);

      // Adding the footer divisor.
      var footer_y = this.#H - this.#FOOTER_HEIGHT - this.#DATA_BOX_LINE_WIDTH
      this.#pdf.line(startx,footer_y,startx + this.#DATA_BOX_WIDTH*2,footer_y,"S")

      this.#pageCounter = this.#pageCounter + 1;

      // Computing and returning the effective area. 
      var effectiveAreaY = headerHeight + this.#DATA_BOX_VSPACE + this.#DATA_BOX_LINE_WIDTH + this.#DATA_BOX_HEIGHT
      var effectiveArea = {
         x: startx,
         y: effectiveAreaY,
         w: this.#DATA_BOX_WIDTH*2,
         h: footer_y - effectiveAreaY
      }      

      // Adding the titles and subtitles. 
      this.#effective_area = effectiveArea;
      return this.addTitlesAndSubTitles(titles)
   } 

   addTitlesAndSubTitles(titles){

      if (titles === undefined) return this.#effective_area;

      this.#pdf.setFont("Montserrat", "SemiBold")
      this.#pdf.setTextColor(Utils.Colors.MAIN_BLUE);
      this.#pdf.setFontSize(this.#TITLE_FONT_SIZE);
      var newy = 0;
      var barx_start = this.#effective_area.x;
      var barx_end   = this.#effective_area.x + this.#effective_area.w;

      // The x value for all titles are the same.
      var x = this.#effective_area.x;

      for (var i = 0; i < titles.length; i++){

         var title = titles[i].text.toUpperCase();
         var yratio = titles[i].py;

         if (i == 0){
            // The first title is the text followed by a solid line.             
            var y = this.#effective_area.y + this.#TITLE_TOP_MARGIN;
            var bb = this.#pdf.getTextDimensions(title);
            this.#pdf.text(title,x,y,{baseline: "top"})
            y = y + bb.h*1.5;
            newy = y;
            this.#pdf.line(barx_start,y,barx_end,y,"S")
         }
         else{

            // Subtitles are dashed lines followed by the title 
            this.#pdf.setLineWidth(this.#DATA_BOX_LINE_WIDTH*0.5);
            var dash_length = 0.005*this.#effective_area.w;
            this.#pdf.setLineDashPattern([dash_length, dash_length*0.75],0);
            //console.log(yratio)
            var y = this.#effective_area.y + this.#effective_area.h*yratio;
            //console.log(y);
            this.#pdf.line(barx_start,y,barx_end,y,"S")

            y = y + this.#TITLE_TOP_MARGIN/2;
            this.#pdf.text(title,x,y,{baseline: "top"})
         }
         

      }

      // Clearing the dash pattern.
      this.#pdf.setLineDashPattern();

      this.#effective_area.h = this.#effective_area.h - (newy - this.#effective_area.y);
      this.#effective_area.y = newy;
      return this.#effective_area;

   }

   /**
    * Prints, vertically centering in a box, a key - value object.
    * @param {Object} [data] -   Will print each line with key value pair as bold(key: ) + data[key]
    * @param {number} [startx] - The x value fo the top left fo the box
    * @param {number} [starty] - The y value of the top left of the box. 
    */
   textOfKeyValueArrayInBox(data, startx, starty){

      var totalHeight = 0;
      for (var key in data){
         var toPrint = key + ": ";
         var dim = this.#pdf.getTextDimensions(toPrint);
         totalHeight = totalHeight + dim.h*this.#VERTICAL_SPACE_MULT;
      }

      var y = starty + (this.#DATA_BOX_HEIGHT - totalHeight)/2

      for (var key in data){

         this.#pdf.setFontSize(this.#DATA_FONT_SIZE);
         this.#pdf.setTextColor(Utils.Colors.MAIN_BLUE);
         
         this.#pdf.setFont("Montserrat","SemiBold")

         var toPrint = key + ": ";
         var dim = this.#pdf.getTextDimensions(toPrint);
         var text_width = this.#pdf.getStringUnitWidth(toPrint)*this.#DATA_FONT_SIZE/this.#pdf.internal.scaleFactor
         this.#pdf.text(toPrint,startx,y,{"baseline":"top"})
         //var dim = this.#pdf.getTextDimensions(toPrint);
         //console.log(dim)

         this.#pdf.setFont("Montserrat","Light")
         this.#pdf.text(data[key],startx+text_width,y,{"baseline":"top"})

         y = y + dim.h*this.#VERTICAL_SPACE_MULT;
      }

   }

}; 


module.exports = ReportPage
