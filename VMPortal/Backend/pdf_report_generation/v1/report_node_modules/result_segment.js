const ResultBar = require("./result_bar");
const Utils = require("./report_utils");

class ResultSegment {

   // Parameters.
   #pdf

   // Constants.
   #FONT_SIZE_VALUE = 14;
   #FONT_SIZE_TITLE = this.#FONT_SIZE_VALUE*0.8;
   //#FONT_SIZE_RANGE_TEXT = this.#FONT_SIZE_TITLE*0.9
   #DASH_LENGTH = 0.005; //% of bb.w
   #DASH_LINE_WIDTH = 0.001 // % of bb.h
   #LEFT_SIDE_MARGIN = 0.02 //% of bb.w
   #RESBAR_LENGTH = 0.2 // % of bb.w
   #RESBAR_HEIGHT = 0.4 // % of bb.h
   #RESBAR_X_START = 0.6 //% of bb.w
   #VALUE_LABEL_X_START = 0.9// % of bb.w;

   constructor(pdf){
      this.#pdf = pdf;
   }

   /**
    * A result segment is coposed of a result bar indicating the position in it, the value to the right of it and, to the left, a title text above a range text.
    * A dashed line is printed below as a divider. 
    * 
    * @param {Object} config - Configuration object
    * @param {Object} [config.boundingBox] - The boundign box for the entire result segment expects fields, x, y, w, h
    * @param {number} [config.value] - The value of the variable being represented. As it needs to be displayed.
    * @param {string} [config.color_code] - Where the indicator needs to land in the result bar. Can be "red", "yellow", "green" or "blue";
    * @param {number} [config.ncolors] - Number of colors in the color bar. Can be 2, 3 or 4. 
    * @param {string} [config.title] - The text naming the value.
    * @param {string} [config.range_text] - The text explaining normal values. 
    * @param {number} [config.ndecimals] - Optiona. If present it controls how many decimals to show on the value. 
    */

   renderConfiguration(config){

      let middle = config.boundingBox.y + config.boundingBox.h/2

      // Add the variable name
      this.#pdf.setFont(Utils.FontNames.NAME, Utils.FontNames.MEDIUM)
      this.#pdf.setTextColor(Utils.Colors.TEXT_BLACK);
      this.#pdf.setFontSize(Utils.FontSizes.NORMAL);

      let halfVMargin = Utils.DimensionMapper.dh(1)

      let title = config.title.toUpperCase()
      let dim = this.#pdf.getTextDimensions(title);
      let x = config.boundingBox.x;
      let y = middle - dim.h/2 - halfVMargin
      this.#pdf.text(title,x,y,{baseline: "bottom"});

      //console.log("Segment Height " + config.boundingBox.h)
      //console.log("Segment Idea Height " + Utils.DimensionMapper.dh(54))


      // Add the variable text.      
      this.#pdf.setFont(Utils.FontNames.NAME, Utils.FontNames.NORMAL)
      this.#pdf.setTextColor(Utils.Colors.TEXT_GRAY);
      this.#pdf.setFontSize(Utils.FontSizes.SMALL);

      dim = this.#pdf.getTextDimensions(config.range_text);
      y = middle + dim.h/2 + halfVMargin
      this.#pdf.text(config.range_text,x,y,{baseline: "top"});

      // Add the circle for the color code.
      x = config.boundingBox.x + Utils.DimensionMapper.dw(325);
      let D = Utils.DimensionMapper.dw(18)
      let R = D/2;      
      y = middle - R

      // Logic to find and set the fill color. 
      var ind_color = config.color_code.toLowerCase();
      if (ind_color == "green") this.#pdf.setFillColor(Utils.Colors.CODE_GREEN);
      else if (ind_color == "yellow") this.#pdf.setFillColor(Utils.Colors.CODE_YELLOW);
      else if (ind_color == "red") this.#pdf.setFillColor(Utils.Colors.CODE_RED);
      else this.#pdf.setFillColor(Utils.Colors.CODE_BLUE);

      this.#pdf.roundedRect(x,y,D,D,R,R,"F") // Using a rounded rect to draw a circle. 

      // Add the numerical value
      x = x + D + Utils.DimensionMapper.dw(62)
      this.#pdf.setFont(Utils.FontNames.NAME, Utils.FontNames.MEDIUM)
      this.#pdf.setTextColor(Utils.Colors.TEXT_BLACK);
      this.#pdf.setFontSize(Utils.FontSizes.LARGE);

      var display_value = config.value;
      if ("ndecimals" in config){
         if (config.ndecimals > 0){
            display_value = display_value.toFixed(config.ndecimals);
         }
         else{
            display_value = Math.round(display_value);
         }
      }      
      dim = this.#pdf.getTextDimensions(display_value);
      y = middle - dim.h/2

      // The y value corresponds to the y value of the circle
      this.#pdf.text('' + display_value,x,y,{baseline: "top"});

      // Add the horizontal bar. 
      let barh = Utils.DimensionMapper.dh(1)
      y = config.boundingBox.y + config.boundingBox.h - barh
      x = config.boundingBox.x
      this.#pdf.setFillColor(Utils.Colors.SEGMENT_SEPARATOR_GRAY)
      this.#pdf.rect(x,y,config.boundingBox.w,barh,"F")

   }


}

module.exports = ResultSegment