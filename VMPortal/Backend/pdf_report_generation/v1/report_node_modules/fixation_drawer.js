const BindingDrawer = require('./binding_drawer');
const GoNoGoDrawer = require('./gonogo_drawer');
//const NBackDrawer = require('Â·/nback_drawer');
const NBackDrawer = require('./nback_drawer')
const Utils = require('./report_utils');

class FixationDrawer {

   // Parameters.
   #pdf
   #config

   // Computed values.
   #draw // This is a gneral object that will be filled depending on the type of study that will be sued. 

   // Constants.
   #H_RATIO_R_SCREEN = 0.15 // % of the bb.w
   #V_RATIO_R_SCREEN = 0.3  // % of the bb.h
   #LINE_WIDTH       = 0.5;
   #FIX_RADIOUS      = 0.04; //% of the bb.h
   #BORDER_FIXATION  = 0.02;
   #FONT_SIZE        = 12;
   
   /**
    * @param {jsPDF Instance} [pdf]
    */

   constructor(pdf){
      this.#pdf = pdf;
      
   }

   /**
    * Draws the screen and fixations over a schematized background corresponding to the configured study
    * @param {Object} [config] - Configuration parameters to actuall draw the fixations.
    * @param {Object} [boundingRect] - Position and size to draw the fixation screen.
    * @param {number} [config.boundingRect.x] - The x coordinate of the top left of the bounding rect. 
    * @param {number} [config.boundingRect.y] - The y coordinate of the top left of the bounding rect. 
    * @param {number} [config.boundingRect.w] - The width of the bounding rect. 
    * @param {number} [config.boundingRect.h] - The height of the bounding rect. 
    * @param {string} [config.label] - Optional. If present it will write a vertical line label on the left side of the box. This will fall outside the bounding box. 
    * @param {string} [config.title] - Optional. If present it will write a horizontal line at top of the fixation. This will fall outside of the bounding box. 
    * @param {Array}  [config.resolution] - 2 number  only. The resolution area represented by the boundingRect (should corrspond to the pixel draw area from the study)
    * @param {Array}  [config.fixations]  - The fixations to draw in the original coordinates. Each item is a 2 value array of the (x,y) coordinates in the original monitor system.
    * @param {Array}  [config.binding] - Optional. If present background will correspond to bindign trial. Item position in order to draw squares. Can have 2 or 3 values, correspondign to a binding of 2/3 targets. Each item has two values a row and column. 
    * @param {Array}  [config.gonogo] - Optional. If present background will correspond to gonogo trial. Description can be either 'R->','R<-','G->' or 'G<-'. The last one is the default.     
    * @param {boolean}[config.enable_legacy_scaling] - Optiona. If present and true it eanbles the secondary scaling of the DrawConstantCalculator required for some legacy fixation drawing. 
    */

   render(config){
      this.#config = config;
      this.renderBackground();


      if ("binding" in config){
         var bindingConfig = {}      
         bindingConfig.original_resolution = this.#config.resolution;
         bindingConfig.target_resolution = [this.#config.boundingRect.w, this.#config.boundingRect.h]
         bindingConfig.lineWidth = this.#LINE_WIDTH;
         bindingConfig.isTwo = (this.#config.binding.length === 2);
         bindingConfig.offset_x = this.#config.boundingRect.x 
         bindingConfig.offset_y = this.#config.boundingRect.y 
         if ("enable_legacy_scaling" in config) bindingConfig.enable_legacy_scaling = config.enable_legacy_scaling
         const binding = new BindingDrawer(this.#pdf,bindingConfig)

         for (i = 0; i < this.#config.binding.length; i++){
            var xandy = this.#config.binding[i];
            binding.bindingDrawFlag(xandy[0],xandy[1]);
         }
      }
      else if ("gonogo" in config){
         var gonogoConfig = {}      
         gonogoConfig.original_resolution = this.#config.resolution;
         gonogoConfig.target_resolution = [this.#config.boundingRect.w, this.#config.boundingRect.h]
         gonogoConfig.offset_x = this.#config.boundingRect.x 
         gonogoConfig.offset_y = this.#config.boundingRect.y 
         gonogoConfig.lineWidth = this.#LINE_WIDTH;
         //if ("enable_legacy_scaling" in config) gonogoConfig.enable_legacy_scaling = config.enable_legacy_scaling
         const gonogo = new GoNoGoDrawer(this.#pdf,gonogoConfig)

         gonogo.drawTrial(config.gonogo);

      }
      else if ("nback" in config){
         var nbackConfig = {};
         nbackConfig.boundingBox = this.#config.boundingRect;
         nbackConfig.resolution = this.#config.resolution;
         const nback = new NBackDrawer(this.#pdf,nbackConfig);
         if (config.nback.length > 0) nback.renderTrial(config.nback)
         else nback.renderTrial()
      }
      

      this.drawFixations();

   }

   renderBackground(){

      // Drawing the Screen.
      this.#pdf.setLineWidth(this.#LINE_WIDTH);
      this.#pdf.setDrawColor(Utils.Colors.MAIN_BLUE);
      var rx = this.#config.boundingRect.w*this.#H_RATIO_R_SCREEN;
      var ry = this.#config.boundingRect.h*this.#V_RATIO_R_SCREEN;
      this.#pdf.roundedRect(this.#config.boundingRect.x,this.#config.boundingRect.y,this.#config.boundingRect.w,this.#config.boundingRect.h,rx,ry);

      // Drawing the label if present.
      if ("label" in this.#config){
        this.#pdf.setFont("Montserrat","Regular")
        this.#pdf.setTextColor(Utils.Colors.DARK_TEXT_COLOR);
        this.#pdf.setFontSize(this.#FONT_SIZE);

        var dim, x, y  
        dim = this.#pdf.getTextDimensions(this.#config.label);
     
        // Computing the y position so that the rotated text is centered on the graph. 
        y = this.#config.boundingRect.y + this.#config.boundingRect.h - (this.#config.boundingRect.h - dim.w)/2
        x = this.#config.boundingRect.x - dim.h; 
     
        this.#pdf.text(this.#config.label,x,y,{angle: 90, rotationDirection: 1});

      }

      // Drawing the title if present. 
      if ("title" in this.#config){
         this.#pdf.setFont("Montserrat","Regular")
         this.#pdf.setTextColor(Utils.Colors.DARK_TEXT_COLOR);
         this.#pdf.setFontSize(this.#FONT_SIZE);

         var dim, x, y  
         dim = this.#pdf.getTextDimensions(this.#config.title);
         x = this.#config.boundingRect.x + (this.#config.boundingRect.w - dim.w)/2
         y = this.#config.boundingRect.y - dim.h; // Providing half a line of space between the top of the fixation box and the bottom linen of the title. 
         this.#pdf.text(this.#config.title,x,y,{baseline: "bottom"});
      }


   }


   drawFixations(){

      // The x, y scale.
      var scalex = this.#config.boundingRect.w/this.#config.resolution[0];
      var scaley = this.#config.boundingRect.h/this.#config.resolution[1];
      var R = this.#config.boundingRect.h*this.#FIX_RADIOUS;

      this.#pdf.setFillColor(Utils.Colors.FIXATION_COLOR);
      this.#pdf.setDrawColor(Utils.Colors.MAIN_BLUE)
      this.#pdf.setLineWidth(this.#BORDER_FIXATION)

      for (var i = 0; i < this.#config.fixations.length; i++){
         var f = this.#config.fixations[i];
         //console.log(f);
         var x = this.#config.boundingRect.x + f[0]*scalex;
         var y = this.#config.boundingRect.y + f[1]*scaley;
         //console.log(x + "," + y + " " + R);
         this.#pdf.circle(x,y,R,'FD');
      }

   }


}

module.exports = FixationDrawer;