#ifndef CALIBRATIONLEASTSQUARES_H
#define CALIBRATIONLEASTSQUARES_H

#include <QList>
#include <QPoint>
#include <QtGlobal>
#include <QDebug>
#include <QDataStream>
#include <QFile>
#include <QObject>
#include <QTimer>
#include <QJsonDocument>
#include <QJsonObject>
#include "calibrationtargets.h"
#include "eyetrackerdata.h"
#include <iostream>

class CalibrationLeastSquares: public QObject
{
    Q_OBJECT
public:

    CalibrationLeastSquares();

    struct EyeInputData{
        qreal xr;
        qreal yr;
        qreal xl;
        qreal yl;
    };

    struct CalibrationData {
        QList<EyeInputData> eyeData;
        qreal x_reference;
        qreal y_reference;
        void clear();
        bool isValid();
        QString toString(bool justRef = false) const;
    };

    struct LinearCoeffs{
        qreal m;
        qreal b;
        bool valid;
        QVariantMap toMap();
        QString toString() const;
        void fromMap(const QVariantMap &map);
    };

    struct EyeCorrectionCoeffs{
        LinearCoeffs xr;
        LinearCoeffs yr;
        LinearCoeffs xl;
        LinearCoeffs yl;
        EyeTrackerData computeCorrections(const EyeInputData &input);
        bool isRightEyeCalibrated();
        bool isLeftEyeCalibrated();
        void saveCalibrationCoefficients(const QString &file_name);
        bool loadCalibrationCoefficients(const QString &file_name);
        QString toString() const;
    };

    // This sets the calibration target class, initializes all variables and starts the calibration timer.
    // npoints can be 5 or 9 if anything other than 9 is used, 5 is assumed.
    void startCalibrationSequence(qint32 width, qint32 height, qint32 npoints = 5);

    // Adding the data point for calibration.
    void addDataPointForCalibration(float xl, float yl, float xr, float yr);

    // This will compute the calibration coefficients once data gathering is done.
    bool computeCalibrationCoeffs();

    // Getting the coefficients once computation is done
    EyeCorrectionCoeffs getCalculatedCoeficients() const;

    // Gets the current Calibration image as generated by the CalibrationTargets class.
    QImage getCurrentCalibrationImage() const;

    // Returns true if the calibration process was started but has not ended.
    bool isCalibrating() const;

signals:
    void newCalibrationImageAvailable();
    void calibrationDone();

private slots:
    void calibrationTimeInTargetUp();
    void newCalibrationFrameAvailable(bool isTransitionDone);

private:

    struct LeastSquaresData{
        QList<qreal> input;
        QList<qreal> target;
        LinearCoeffs computeLinearCoeffs();
    };

    EyeCorrectionCoeffs coeffs;

    // This is the image that will be shown.
    CalibrationTargets calibrationTargets;

    // The list of all the calibration data points.
    QList<CalibrationData> collectedCalibrationDataPoints;

    // This will collect the information of an individual data point.
    CalibrationData currentlyCollectingCalibrationPoints;

    // Holds the currently generated calibration image.
    // QImage currentCalibrationImage;

    // Index of the list of collectedCalibrationDataPoints.
    // qint32 currentCalibrationPointIndex;

    // The timer that indicates when to move the next target.
    QTimer calibrationTimer;

    // Flag that indicates if we are in the wait time of calibration or the gather time.
    bool isDataGatheringEnabled;

    // Flag to indicate the duration of the calibration process.
    bool isCalibratingFlag;

    // How long to wait to gather data for each target.
    static const qint32 CALIBRATION_WAIT_TIME = 1000;

    // How data is gathered for each target.
    static const qint32 CALIBRATION_GATHER_TIME = 2000;

};

#endif // CALIBRATIONLEASTSQUARES_H
