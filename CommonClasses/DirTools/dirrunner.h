#ifndef DIRRUNNER_H
#define DIRRUNNER_H

#include <QThread>
#include <QDir>
#include <QStringList>
#include <QFileInfo>

/**
 * @brief The DirRunner class - Recursive run in a directory to generate the list of all paths and files in a worker thread.
 *
 */

class DirRunner: public QThread
{
    Q_OBJECT

public:
    DirRunner();    

    /**
     * @brief setupListGeneration
     * @param rootDir - The directory where the directory run will start.
     */
    void setupListGeneration(const QString &rootDir);

    /**
     * @brief setupFindFile - Set up the run to find a specific file. The recursive run will end upon finding the file
     * @param fileToFind - The file which we need to locate.
     * @param rootDir - Where to start. If the file is an direcotry above the hiearchy for this, then it will not be found.
     */
    void setupFindFile(const QString &fileToFind, const QString &rootDir);

    /**
     * @brief setupFindDir - Set up the run to find a specific directory. The recursive run will end upon finding the directory
     * @param dirToFind - The directory which we need to locate. The first instance found will stop the recursive run.
     * @param rootDir - Where to start.
     */
    void setupFindDir(const QString &dirToFind, const QString &rootDir);

    void run();

    /**
     * @brief getListOfPaths
     * @return The file list that was generated by either the list generation or the file search.
     */
    QStringList getListOfPaths() const;

    /**
     * @brief getPathForSearched
     * @return The path of the file/directory that was searched, if it was found. It will be the last item in the list. Empty string otherwise.
     */
    QString getPathForSearched() const;

private:

    QStringList listOfPaths;
    QString rootDir;
    QString fileToFind;
    QString dirToFind;
    bool fileFound;
    bool dirFound;

    void recursiveDirectoryList(const QString &dir, QStringList *list);


};

#endif // DIRRUNNER_H
