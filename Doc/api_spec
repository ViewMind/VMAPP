The API will function as three part address (always) followed by parameters if necessary. Always with POST.

The parts will be OBJECT/OPERATION/INDENTIFIER?other_parameters

So for example getting all doctors for an institution will look like
portal_users/getall/insitution_id

And getting all rawdata from a given institution in a given timeframe will be
rawdata/download/institution?from=date&to=date

In the same way permissions can be specified like so: For each object. 
{
   "object" : [ "operation_1",  "operation_2", ....]   
}


VMClients have the following permissions: 
{ 
   "portal_users": [ "getall" ],
   "reports" : ["generate"]   
}
==================================== API Spec.

-> OBJECT: portal_users
      OPERATION: getallmedical
         IDENTIFIER: institution_id
            Will return a associative array with the key the internal user key and the value another associative array with full name and email. Only medical and admin users. 
            
-> OBJECT: portal_users
      OPERATION: enable
         IDENTIFIER: email
            PARAMETERS: enable_token
               This is a very special endpoint as it is the ONLY endpoint that does NOT go through the authentication process. 
               What this does is verify that the email exists, that the token passed as a parameter exists as well and, if it's not too old, the user gets enabled.
               For this to work the user must have been previously been created. 

-> OBJECT: portal_users
      OPERATION: modify_own
         IDENTIFIER: email
            PARAMETERS: Modification parameters. 
              The user is allowed to modify basic info: his name, last name, company he works for and his password. 
               
-> OBJECT: institution
      OPERATION: list.
         IDENTIFIER: portal_user
            Will return a list of the institution data that the portal_user can see. 

-> OBJECT: institution
      OPERATION: operating_information
        IDENTIFIER:: institution_id
            PARAMETERS: ppkey
               Returns the list of portal users associated with the institutions and the processing parameters associated with ppkey. 
               EXAMPLE: institution/operating_information/1?ppkey=htcviveeyepro
            
-> OBJECT: reports
      OPERATION: generate
         IDENTIFIER: institutution_id
               PARAMETERS: instance
               Will trigger the whole report processing.
               1) DB Update of Subject data, if necessary.
               2) Whatever checks are necessary 
               3) First pass at JSON File 
                   - Computes fixation based values. 
                   - Computes other metadata for each trial or trial set.
                   - Sets other metadata such as the processing date (maybe the processing location?).
               4) CSV Creation.
               5) R Processing. 
               6) Second pass at the JSON file that stores all results into the JSON 
               7) DB Storage of all appropiate results. 
               8) With the keyid form the evaluations table store, the JSON file in the S3. 
               
      OPERATION: list
         IDENTIFIER: subject_id
               Returns a list of reports for a given subject. No actual quality control or report data is returned. But only if the user_id is the user of the reports. 
               
      OPERATION: get
         IDENTIFIER: report_id
               Returns the report data an QC data for that specific report. But only if the report is associated with the portal user. 
               
            
-> OBJECT: rawdata
      OPERATION: download
         IDENTIFIER: institution_id
            PARAMETERS: from and to. (Start and End Date).
               Will copy all requested data from S3 (queries aside) to a directory. Compress it and send it back. 
               
               
-> OBJECT: subjects
      OPERATION: list
         IDENTIFIER: institution_id
            PARAMETERS: pp (portal user)
               Lists all the subjects that have reports associated with the portal user pp from the Institution with the ID institution_id
